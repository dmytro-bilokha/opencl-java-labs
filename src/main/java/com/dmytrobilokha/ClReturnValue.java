package com.dmytrobilokha;

public enum ClReturnValue {

    CL_SUCCESS(0),
    CL_DEVICE_NOT_FOUND(-1),
    CL_DEVICE_NOT_AVAILABLE(-2),
    CL_COMPILER_NOT_AVAILABLE(-3),
    CL_MEM_OBJECT_ALLOCATION_FAILURE(-4),
    CL_OUT_OF_RESOURCES(-5),
    CL_OUT_OF_HOST_MEMORY(-6),
    CL_PROFILING_INFO_NOT_AVAILABLE(-7),
    CL_MEM_COPY_OVERLAP(-8),
    CL_IMAGE_FORMAT_MISMATCH(-9),
    CL_IMAGE_FORMAT_NOT_SUPPORTED(-10),
    CL_BUILD_PROGRAM_FAILURE(-11),
    CL_MAP_FAILURE(-12),
    CL_MISALIGNED_SUB_BUFFER_OFFSET(-13),
    CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST(-14),
    CL_COMPILE_PROGRAM_FAILURE(-15),
    CL_LINKER_NOT_AVAILABLE(-16),
    CL_LINK_PROGRAM_FAILURE(-17),
    CL_DEVICE_PARTITION_FAILED(-18),
    CL_KERNEL_ARG_INFO_NOT_AVAILABLE(-19),
    CL_INVALID_VALUE(-30),
    CL_INVALID_DEVICE_TYPE(-31),
    CL_INVALID_PLATFORM(-32),
    CL_INVALID_DEVICE(-33),
    CL_INVALID_CONTEXT(-34),
    CL_INVALID_QUEUE_PROPERTIES(-35),
    CL_INVALID_COMMAND_QUEUE(-36),
    CL_INVALID_HOST_PTR(-37),
    CL_INVALID_MEM_OBJECT(-38),
    CL_INVALID_IMAGE_FORMAT_DESCRIPTOR(-39),
    CL_INVALID_IMAGE_SIZE(-40),
    CL_INVALID_SAMPLER(-41),
    CL_INVALID_BINARY(-42),
    CL_INVALID_BUILD_OPTIONS(-43),
    CL_INVALID_PROGRAM(-44),
    CL_INVALID_PROGRAM_EXECUTABLE(-45),
    CL_INVALID_KERNEL_NAME(-46),
    CL_INVALID_KERNEL_DEFINITION(-47),
    CL_INVALID_KERNEL(-48),
    CL_INVALID_ARG_INDEX(-49),
    CL_INVALID_ARG_VALUE(-50),
    CL_INVALID_ARG_SIZE(-51),
    CL_INVALID_KERNEL_ARGS(-52),
    CL_INVALID_WORK_DIMENSION(-53),
    CL_INVALID_WORK_GROUP_SIZE(-54),
    CL_INVALID_WORK_ITEM_SIZE(-55),
    CL_INVALID_GLOBAL_OFFSET(-56),
    CL_INVALID_EVENT_WAIT_LIST(-57),
    CL_INVALID_EVENT(-58),
    CL_INVALID_OPERATION(-59),
    CL_INVALID_GL_OBJECT(-60),
    CL_INVALID_BUFFER_SIZE(-61),
    CL_INVALID_MIP_LEVEL(-62),
    CL_INVALID_GLOBAL_WORK_SIZE(-63),
    CL_INVALID_PROPERTY(-64),
    CL_INVALID_IMAGE_DESCRIPTOR(-65),
    CL_INVALID_COMPILER_OPTIONS(-66),
    CL_INVALID_LINKER_OPTIONS(-67),
    CL_INVALID_DEVICE_PARTITION_COUNT(-68),
    CL_INVALID_PIPE_SIZE(-69),
    CL_INVALID_DEVICE_QUEUE(-70),
    CL_INVALID_SPEC_ID(-71),
    CL_MAX_SIZE_RESTRICTION_EXCEEDED(-72),
    CL_INVALID_COMMAND_BUFFER_KHR(-1138),
    CL_INVALID_SYNC_POINT_WAIT_LIST_KHR(-1139),
    CL_INCOMPATIBLE_COMMAND_QUEUE_KHR(-1140),
    CL_INVALID_MUTABLE_COMMAND_KHR(-1141),
    CL_PLATFORM_NOT_FOUND_KHR(-1001),
    CL_CONTEXT_TERMINATED_KHR(-1121),
    CL_DEVICE_PARTITION_FAILED_EXT(-1057),
    CL_INVALID_PARTITION_COUNT_EXT(-1058),
    CL_INVALID_PARTITION_NAME_EXT(-1059),
    CL_GRALLOC_RESOURCE_NOT_ACQUIRED_IMG(0x40D4),
    CL_INVALID_GRALLOC_OBJECT_IMG(0x40D5),
    CL_INVALID_SEMAPHORE_KHR(-1142),
    CL_COMMAND_TERMINATED_ITSELF_WITH_FAILURE_ARM(-1108),
    CL_INVALID_ACCELERATOR_INTEL(-1094),
    CL_INVALID_ACCELERATOR_TYPE_INTEL(-1095),
    CL_INVALID_ACCELERATOR_DESCRIPTOR_INTEL(-1096),
    CL_ACCELERATOR_TYPE_NOT_SUPPORTED_INTEL(-1097),
    CL_CANCELLED_IMG(-1126);

    private final int intValue;

    ClReturnValue(int intValue) {
        this.intValue = intValue;
    }

    public static ClReturnValue fromIntValue(int value) {
        for (var item : ClReturnValue.values()) {
            if (item.intValue == value) {
                return item;
            }
        }
        throw new IllegalArgumentException("Unable to map " + value);
    }

    public static String convertToString(int value) {
        for (var item : ClReturnValue.values()) {
            if (item.intValue == value) {
                return item.name();
            }
        }
        return String.valueOf(value);
    }

    public int getIntValue() {
        return intValue;
    }

    public boolean matches(int intValue) {
        return this.intValue == intValue;
    }

}
